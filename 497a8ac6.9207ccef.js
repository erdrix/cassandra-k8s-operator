(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var a=n(1),r=n(9),o=(n(0),n(182)),s={id:"9_cassandra_node_management",title:"Cassandra nodes management",sidebar_label:"Cassandra nodes management"},c={id:"casskop/2_deployment_configuration/9_cassandra_node_management",title:"Cassandra nodes management",description:"CassKop in duo with the Cassandra docker Image is responsible of the lifecycle of the Cassandra nodes.",source:"@site/docs/casskop/2_deployment_configuration/9_cassandra_node_management.md",permalink:"/casskop/docs/casskop/2_deployment_configuration/9_cassandra_node_management",editUrl:"https://erdrix.github.io/casskop/edit/master/website/docs/casskop/2_deployment_configuration/9_cassandra_node_management.md",sidebar_label:"Cassandra nodes management",sidebar:"docs",previous:{title:"Advanced configuration",permalink:"/casskop/docs/casskop/2_deployment_configuration/8_advanced_configuration"},next:{title:"Cassandra cluster status",permalink:"/casskop/docs/casskop/2_deployment_configuration/10_cassandracluster_status"}},i=[{value:"HealthChecks",id:"healthchecks",children:[]},{value:"Pod lifeCycle",id:"pod-lifecycle",children:[{value:"PreStop",id:"prestop",children:[]}]},{value:"Prometheus metrics export",id:"prometheus-metrics-export",children:[]}],p={rightToc:i};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"CassKop in duo with the Cassandra docker Image is responsible of the lifecycle of the Cassandra nodes."),Object(o.b)("h2",{id:"healthchecks"},"HealthChecks"),Object(o.b)("p",null,"Healthchecks are periodical tests which verify Cassandra's health. When the healthcheck fails, Kubernetes can assume\nthat the application is not healthy and attempt to fix it. Kubernetes supports two types of Healthcheck probes : "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Liveness probes"),Object(o.b)("li",{parentName:"ul"},"Readiness probes.")),Object(o.b)("p",null,"You can find more details in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/"}),"Kubernetes\ndocumentation"),"."),Object(o.b)("p",null,"Both ",Object(o.b)("inlineCode",{parentName:"p"},"livenessProbe")," and ",Object(o.b)("inlineCode",{parentName:"p"},"readinessProbe")," support two additional options:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"initialDelaySeconds"),": defines the initial delay before the probe is tried for the first time. Default is 15 seconds"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"timeoutSeconds"),": defines the timeout of the probe. CassKop uses 20 seconds."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"periodSeconds"),": the period to wait between each call to a probe: CassKop uses 40 seconds.")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"TODO: This is actually not configurable by CassKop: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Orange-OpenSource/casskop/issues/102"}),"Issue102"))),Object(o.b)("h2",{id:"pod-lifecycle"},"Pod lifeCycle"),Object(o.b)("p",null,"The Kubernetes Pods allows user to defines specific hooks to be executed at some times"),Object(o.b)("h3",{id:"prestop"},"PreStop"),Object(o.b)("p",null,"CassKop uses the PreStop hook to execute some commands before the pod is going to be killed.\nIn first iteration we were executing a ",Object(o.b)("inlineCode",{parentName:"p"},"nodetool drain")," and it used to make some unpredictible behaviours.\nAt the time of writing this document, there is no ",Object(o.b)("inlineCode",{parentName:"p"},"PreStop")," action executed. "),Object(o.b)("h2",{id:"prometheus-metrics-export"},"Prometheus metrics export"),Object(o.b)("p",null,"We currently uses the CoreOS Prometheus Operator to export the Cassandra nodes metrics. We must create a serviceMonitor\nobject in the prometheus namespaces, pointing to the exporter-prometheus-service which is created by CassKop:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"$ cat samples/prometheus-cassandra-service-monitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: prometheus-cassandra-jmx\n  labels:\n    k8s-apps: cassandra-k8s-jmx\n    prometheus: kube-prometheus\n    component: cassandra\n    app: cassandra\nspec:\n  jobLabel: kube-prometheus-cassandra-k8s-jmx\n  selector:\n    matchLabels:\n      k8s-app: exporter-cassandra-jmx\n  namespaceSelector:\n      matchNames:\n      - cassandra\n      - cassandra-demo\n  endpoints:\n  - port: promjmx\n    interval: 15s\n")),Object(o.b)("p",null,"Actually the Cassandra nodes uses the work of Oleg Glusahak ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/oleg-glushak/cassandra-prometheus-jmx"}),"https://github.com/oleg-glushak/cassandra-prometheus-jmx")," but\nthis may change in the futur."))}l.isMDXComponent=!0},182:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},d=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),b=a,m=d["".concat(s,".").concat(b)]||d[b]||u[b]||o;return n?r.a.createElement(m,c({ref:t},p,{components:n})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);